Fast R-CNN

Fast R-CNN을 설명하기에 앞서서 Fast R-CNN의 이전 버전인 R-CNN에 대해 짧게 소개하자면 R-CNN은 CNN(convolutional Neural Network)을 사용한 최초의 Object Detection 방법입니다. 이전의 방법들에 비해서 성능을 많이 끌어 올렸지만 치명적인 단점이 몇가지 있었습니다. 
 첫 째, AlexNet을 그대로 사용하기 위해 Image를 강제로 244x244 크기로 warping시켰기에 이미지 변형으로 인한 성능 손실이 존재했습니다.
 둘 째, Selective Search를 통해 뽑힌 2000개의 image Proposal 후보를 모두 CNN 모델에 집어넣어 traing, testing 시간이 매우 오래 걸렸습니다.
 셋 째 Selective Search나 SVM이 GPU를 사용하기에 적합한 구조가 아니었습니다.
 넷 째 뒷부분에서 수행한 Computation을 공유하지 않는 문제점이 있었습니다.
Fast R-CNN은 이 단점들을 해결 하는데 초점을 두었고, 좀 더 빠르고 성능이 좋은 Object detection 방법을 소개하였습니다.

이제 Fast R-CNN에 대해서 소개하자면 Fast R- CNN은 deep convolutional network method를 사용하여 객체 제안을 효율적으로 분류하기 위한 빠른 프레임 워크입니다. Fast R-CNN은 탐지 정확도를 높이는 동시에 훈련 및 테스트 속도를 개선하기 위해 몇 가지 개선점이 있습니다.
 1) R-CNN은 RoI마다 CNN연산을 하여 속도 저하가 발생하고, multi-stage pipelines으로써 모델을 한 번에 학습시키지 못한다는 한계점이 있습니다. Fast R-CNN은 RoI pooling과 CNN 특징 추출부터 classification, bounding box regression까지 하나의 모델에서 학습하는 것으로 다음의 한계점을 극복하였습니다. 
 2) Fast R-CNN은 매우 깊은 VGG16 네트워크를 기존의 R-CNN보다 9배 빠르게 훈련하고, 213배 빠르게 테스트합니다. SPPnet과 비교하였을 땐 Fast R-CNN은 VGG16을 3배 더 빠르게 훈련하고 10배 더 빠르게 테스트하고 더 정확합니다. Fast R-CNN은 python 및 C++로 구현되며 오픈소스 MIT라이선스를 통해 사용할 수 있습니다.

Fast R-CNN의 수행과정을 설명하자면 
 첫 번째로 R-CNN과 같이 Selective Search를 통해 RoI를 찾고, 전체 이미지를 CNN에 통과시켜 feature map을 추출합니다.
 두 번째로 Selective Search로 찾았던 ROI를 feature map 크기에 맞춰 projection 시킵니다.
 세 번째로 projection시킨 RoI에 대해 RoI Pooling을 진행하여 고정된 크기의 feature vector를 얻습니다. 
 네 번째로 feature vector는 FC layer를 통과하고 두 브랜치로 나뉘게 됩니다. 
 그 중 하나는 softmax를 통과해 RoI에 대해 object classification을 하고, bounding box regression을 통해 selective search로 찾은 box의 위치를 조정합니다. 
 여기서 가장 중요한 것은 RoI pooling입니다. R-CNN에서는 CNN ouput이 FC layer의 input으로 들어가야 했기에 CNN input을 동일한 사이즈로 맞춰줘야 했습니다. 따라서 이미지에서 추출한 ROI를 crop, warp을 통해 동일 size로 조정했었습니다. 그러나 실제로는 FC layer의 input이 고정인 것 이지 CNN input은 고정이 아닙니다. 따라서 CNN에는 입력 이미지, 크기, 비율 관계없이 input으로 들어 갈 수 있고, FC layer의 input으로 들어갈 때만 size를 맞춰주기만 하면 됩니다. 
 여기서 Spatial Pyramid Pooling(SPP)가 제안됩니다. SPP에서는 먼저 이미지를 CNN에 통과 시켜서 feature map을 추출합니다. 그리고 미리 정해진 4x4, 2x2, 1x1영역의 피라미드로 feature map을 나눠줍니다. 피라미드의 한 칸을 bin이라고 하고, 각 bin 내에서 max pooling을 적용하여 각 bin마다 하나의 값을 추출하고, 최종적으로 피라미드 크기만큼 max값을 추출하여 3개의 피라미드의 결과를 쭉 이어 붙여서 고정된 크기의 vector를 만듭니다. 정리하면 4x4, 2x2, 1x1 세 가지 피라미드가 있고, max pooling을 적용하여 각 피라미드 크기에 맞게 max값을 뽑아냅니다. 각 피라미드 별로 뽑아낸 max값을 쭉 이어 붙여서 고정된 크기의 vector를 만들고 이게 FC layer의 input으로 들어갑니다. 따라서 CNN을 통과한 feature map에서 2천개의 region proposal을 만들고 region proposal마다 SPPNet에 집어넣어 고정된 크기의 feature vector를 얻어냅니다. 이 작업을 통해 모든 2천개의 region proposal마다 수행해야했던 2천 번의 CNN연산이 1번으로 줄어들었습니다.

 Fast R-CNN에서 적용된 피라미드 SPP로 고정된 크기의 feture vector를 만드는 과정을 RoI Pooling이라 합니다. 
RoI Pooling이란 먼저 원본 이미지를 CNN모델에 통과시켜 feature map을 얻습니다. 동시에 원본 이미지에 대하여 Selective search 알고리즘을 적용하여 region proposals를 얻습니다. 그 후 feature map에서 각 region proposals에 해당하는 영역을 추출합니다. 이 과정은 RoI Projection을 통해 이루어집니다. Selective search를 통해 얻은 region proposals는 sub-sampling 과정을 거치지 않은 반면 원본 이미지의 feature map은 sub- sampling 과정을 여러 번 거쳐 크기가 작아집니다. 작아진 feature map에서 region proposals이 encode하고 있는 부분을 찾기 위해 작아진 feature map에 맞게 region proposals를 투영해주는 과정이 필요합니다. 이는 region proposal의 크기와 중심 좌표를 sub sampling ratio에 맞게 변경시켜줌으로써 가능 합니다.  추출한 RoI feature map을 지정한 sub-window의 크기에 맞게 gird로 나눠주고, grid의 각 셀에 대하여 max pooling을 수행하여 고정된 크기의 feature map을 얻습니다. 다음과 같이 미리 지정한 크기의 sub-window에서 max pooling을 수행하기에 region proposal의 크기가 서로 달라도 고정된 크기의 feature map을 얻을 수 있습니다.
 다음은 R-CNN의 문제인 multi-stage pipeline으로 인해 3가지 모델을 따로 학습해야 했던 문제입니다. R-CNN에서는 CNN을 통과한 후 각각 서로 다른 모델인 SVM, bounding box regression, 안으로 들어가 forward되었기에 연산이 공유되지 않았지만, 여기에 RoI pooling을 추가함으로써 이제 RoI영역을 CNN을 거친 후 feature map에 투영시킬 수 있었습니다. 따라서 동일 data가 softmax(classification), bbox regression으로 들어가기에 연산을 공유 할 수 있었습니다. 이제는 모델이 end-to-end로 한 번에 학습시킬 수 있다는 뜻입니다.
Fast R-CNN의 Loss function은 classifiaciton과 localization loss를 합친 function으로써 한 번의 학습으로 둘 다 학습시킬 수 있습니다.



 결론으로, Fast R-CNN은 RoI Pooling을 하나 추가함으로써 
1) CNN후에 region proposal 연산 – 2000번의 CNN연산을 1번의 CNN연산으로 발전시켰다
2) 변경된 feature vector가 결국 기존의 region proposal을 projection 연산 시킨 후 연산한 것이므로 해당 output으로 classification과 bbox regression도 학습 가능한 성과를 이를 수 있었다. 
하지만 Fast R-CNN에서도 R-CNN과 마찬가지로 RoI를 생성하는 Selective search 알고리즘은 CNN외부에서 진행되기에 이 부분이 속도의 bottle neck이다. 
따라서 이 RoI 생성마저 CNN 내부에서 함으로써 더욱 빠르면서 정확한 region proposal을 생성하는 Faster R-CNN으로 발전하게 됩니다.
